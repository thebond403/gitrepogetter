// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'layers/data/ob_box/entities/home_entities/last_fetch_time_entity_ob.dart';
import 'layers/data/ob_box/entities/home_entities/repository_response_entity_ob.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1355922249821047340),
      name: 'RepositoryResponseEntityOb',
      lastPropertyId: const IdUid(41, 2707641182811648390),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6020719516737501940),
            name: 'archived',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 2627313905594299130),
            name: 'commentsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1348309606093232443),
            name: 'contributorsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2651373677157915033),
            name: 'createdAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2434332541530925467),
            name: 'defaultBranch',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5102380465524021912),
            name: 'deploymentsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4849823995525986038),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5665529335508175504),
            name: 'disabled',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8471584420662915743),
            name: 'forks',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4690792605844258243),
            name: 'forksCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6741350692438505769),
            name: 'fullName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 9137434419725011090),
            name: 'gitUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5877703049638143467),
            name: 'hasDiscussions',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8859447233014192420),
            name: 'homepage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 892246781297736735),
            name: 'htmlUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5951258190695054533),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(17, 4537308770048256749),
            name: 'issuesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 4753955688328072832),
            name: 'labelsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 6056205666069842788),
            name: 'language',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 1829532050700627025),
            name: 'languagesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4779622685189536951),
            name: 'license',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 7587535624189709155),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 232642472467745244),
            name: 'openIssues',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 3302432020396100064),
            name: 'openIssuesCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 3478664552978320913),
            name: 'owner',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 2197705748841766109),
            name: 'permissions',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 1407949970489231189),
            name: 'private',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 8063228046911947012),
            name: 'pullsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 1800285924536242849),
            name: 'pushedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 7024955892076454948),
            name: 'releasesUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 4043391420069054268),
            name: 'size',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 3133618173556677496),
            name: 'stargazersCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 7939929058392679126),
            name: 'subscribersUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 701807979298797304),
            name: 'subscriptionUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 7339287268355022126),
            name: 'teamsUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 5101958371608133264),
            name: 'topics',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 4421309686339069915),
            name: 'updatedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 3801030718085154654),
            name: 'url',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 3276065401729169100),
            name: 'visibility',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 5194861409717186761),
            name: 'watchers',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 2707641182811648390),
            name: 'watchersCount',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2066051922241151857),
      name: 'LastFetchTimeEntityOb',
      lastPropertyId: const IdUid(2, 552387152270822526),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 734433958676867038),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 552387152270822526),
            name: 'lastFetchTime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 2066051922241151857),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    RepositoryResponseEntityOb: EntityDefinition<RepositoryResponseEntityOb>(
        model: _entities[0],
        toOneRelations: (RepositoryResponseEntityOb object) => [],
        toManyRelations: (RepositoryResponseEntityOb object) => {},
        getId: (RepositoryResponseEntityOb object) => object.id,
        setId: (RepositoryResponseEntityOb object, int id) {
          object.id = id;
        },
        objectToFB: (RepositoryResponseEntityOb object, fb.Builder fbb) {
          final commentsUrlOffset = object.commentsUrl == null
              ? null
              : fbb.writeString(object.commentsUrl!);
          final contributorsUrlOffset = object.contributorsUrl == null
              ? null
              : fbb.writeString(object.contributorsUrl!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          final defaultBranchOffset = object.defaultBranch == null
              ? null
              : fbb.writeString(object.defaultBranch!);
          final deploymentsUrlOffset = object.deploymentsUrl == null
              ? null
              : fbb.writeString(object.deploymentsUrl!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final fullNameOffset = object.fullName == null
              ? null
              : fbb.writeString(object.fullName!);
          final gitUrlOffset =
              object.gitUrl == null ? null : fbb.writeString(object.gitUrl!);
          final homepageOffset = object.homepage == null
              ? null
              : fbb.writeString(object.homepage!);
          final htmlUrlOffset =
              object.htmlUrl == null ? null : fbb.writeString(object.htmlUrl!);
          final issuesUrlOffset = object.issuesUrl == null
              ? null
              : fbb.writeString(object.issuesUrl!);
          final labelsUrlOffset = object.labelsUrl == null
              ? null
              : fbb.writeString(object.labelsUrl!);
          final languageOffset = object.language == null
              ? null
              : fbb.writeString(object.language!);
          final languagesUrlOffset = object.languagesUrl == null
              ? null
              : fbb.writeString(object.languagesUrl!);
          final licenseOffset =
              object.license == null ? null : fbb.writeString(object.license!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final ownerOffset =
              object.owner == null ? null : fbb.writeString(object.owner!);
          final permissionsOffset = object.permissions == null
              ? null
              : fbb.writeString(object.permissions!);
          final pullsUrlOffset = object.pullsUrl == null
              ? null
              : fbb.writeString(object.pullsUrl!);
          final pushedAtOffset = object.pushedAt == null
              ? null
              : fbb.writeString(object.pushedAt!);
          final releasesUrlOffset = object.releasesUrl == null
              ? null
              : fbb.writeString(object.releasesUrl!);
          final subscribersUrlOffset = object.subscribersUrl == null
              ? null
              : fbb.writeString(object.subscribersUrl!);
          final subscriptionUrlOffset = object.subscriptionUrl == null
              ? null
              : fbb.writeString(object.subscriptionUrl!);
          final teamsUrlOffset = object.teamsUrl == null
              ? null
              : fbb.writeString(object.teamsUrl!);
          final topicsOffset = object.topics == null
              ? null
              : fbb.writeList(
                  object.topics!.map(fbb.writeString).toList(growable: false));
          final updatedAtOffset = object.updatedAt == null
              ? null
              : fbb.writeString(object.updatedAt!);
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          final visibilityOffset = object.visibility == null
              ? null
              : fbb.writeString(object.visibility!);
          fbb.startTable(42);
          fbb.addBool(0, object.archived);
          fbb.addOffset(1, commentsUrlOffset);
          fbb.addOffset(2, contributorsUrlOffset);
          fbb.addOffset(3, createdAtOffset);
          fbb.addOffset(4, defaultBranchOffset);
          fbb.addOffset(5, deploymentsUrlOffset);
          fbb.addOffset(6, descriptionOffset);
          fbb.addBool(7, object.disabled);
          fbb.addInt64(8, object.forks);
          fbb.addInt64(9, object.forksCount);
          fbb.addOffset(10, fullNameOffset);
          fbb.addOffset(11, gitUrlOffset);
          fbb.addBool(12, object.hasDiscussions);
          fbb.addOffset(13, homepageOffset);
          fbb.addOffset(14, htmlUrlOffset);
          fbb.addInt64(15, object.id);
          fbb.addOffset(16, issuesUrlOffset);
          fbb.addOffset(17, labelsUrlOffset);
          fbb.addOffset(18, languageOffset);
          fbb.addOffset(19, languagesUrlOffset);
          fbb.addOffset(20, licenseOffset);
          fbb.addOffset(21, nameOffset);
          fbb.addInt64(22, object.openIssues);
          fbb.addInt64(23, object.openIssuesCount);
          fbb.addOffset(24, ownerOffset);
          fbb.addOffset(25, permissionsOffset);
          fbb.addBool(26, object.private);
          fbb.addOffset(27, pullsUrlOffset);
          fbb.addOffset(28, pushedAtOffset);
          fbb.addOffset(29, releasesUrlOffset);
          fbb.addInt64(30, object.size);
          fbb.addInt64(31, object.stargazersCount);
          fbb.addOffset(32, subscribersUrlOffset);
          fbb.addOffset(33, subscriptionUrlOffset);
          fbb.addOffset(34, teamsUrlOffset);
          fbb.addOffset(35, topicsOffset);
          fbb.addOffset(36, updatedAtOffset);
          fbb.addOffset(37, urlOffset);
          fbb.addOffset(38, visibilityOffset);
          fbb.addInt64(39, object.watchers);
          fbb.addInt64(40, object.watchersCount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 46);
          final fullNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final privateParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 56);
          final ownerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 52);
          final htmlUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 78);
          final teamsUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 72);
          final languagesUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 42);
          final contributorsUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final subscribersUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 68);
          final subscriptionUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 70);
          final commentsUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6);
          final issuesUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final pullsUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 58);
          final labelsUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final releasesUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 62);
          final deploymentsUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final createdAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final updatedAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 76);
          final pushedAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 60);
          final gitUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final homepageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final sizeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 64);
          final stargazersCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 66);
          final watchersCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 84);
          final languageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final hasDiscussionsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);
          final forksCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final archivedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 4);
          final disabledParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final openIssuesCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 50);
          final licenseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 44);
          final topicsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 74);
          final visibilityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 80);
          final forksParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final openIssuesParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 48);
          final watchersParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 82);
          final defaultBranchParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final permissionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 54);
          final object = RepositoryResponseEntityOb(
              id: idParam,
              name: nameParam,
              fullName: fullNameParam,
              private: privateParam,
              owner: ownerParam,
              htmlUrl: htmlUrlParam,
              description: descriptionParam,
              url: urlParam,
              teamsUrl: teamsUrlParam,
              languagesUrl: languagesUrlParam,
              contributorsUrl: contributorsUrlParam,
              subscribersUrl: subscribersUrlParam,
              subscriptionUrl: subscriptionUrlParam,
              commentsUrl: commentsUrlParam,
              issuesUrl: issuesUrlParam,
              pullsUrl: pullsUrlParam,
              labelsUrl: labelsUrlParam,
              releasesUrl: releasesUrlParam,
              deploymentsUrl: deploymentsUrlParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              pushedAt: pushedAtParam,
              gitUrl: gitUrlParam,
              homepage: homepageParam,
              size: sizeParam,
              stargazersCount: stargazersCountParam,
              watchersCount: watchersCountParam,
              language: languageParam,
              hasDiscussions: hasDiscussionsParam,
              forksCount: forksCountParam,
              archived: archivedParam,
              disabled: disabledParam,
              openIssuesCount: openIssuesCountParam,
              license: licenseParam,
              topics: topicsParam,
              visibility: visibilityParam,
              forks: forksParam,
              openIssues: openIssuesParam,
              watchers: watchersParam,
              defaultBranch: defaultBranchParam,
              permissions: permissionsParam);

          return object;
        }),
    LastFetchTimeEntityOb: EntityDefinition<LastFetchTimeEntityOb>(
        model: _entities[1],
        toOneRelations: (LastFetchTimeEntityOb object) => [],
        toManyRelations: (LastFetchTimeEntityOb object) => {},
        getId: (LastFetchTimeEntityOb object) => object.id,
        setId: (LastFetchTimeEntityOb object, int id) {
          object.id = id;
        },
        objectToFB: (LastFetchTimeEntityOb object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastFetchTime?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastFetchTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final lastFetchTimeParam = lastFetchTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastFetchTimeValue);
          final object = LastFetchTimeEntityOb(
              id: idParam, lastFetchTime: lastFetchTimeParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [RepositoryResponseEntityOb] entity fields to define ObjectBox queries.
class RepositoryResponseEntityOb_ {
  /// see [RepositoryResponseEntityOb.archived]
  static final archived = QueryBooleanProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[0]);

  /// see [RepositoryResponseEntityOb.commentsUrl]
  static final commentsUrl = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[1]);

  /// see [RepositoryResponseEntityOb.contributorsUrl]
  static final contributorsUrl =
      QueryStringProperty<RepositoryResponseEntityOb>(
          _entities[0].properties[2]);

  /// see [RepositoryResponseEntityOb.createdAt]
  static final createdAt = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[3]);

  /// see [RepositoryResponseEntityOb.defaultBranch]
  static final defaultBranch = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[4]);

  /// see [RepositoryResponseEntityOb.deploymentsUrl]
  static final deploymentsUrl = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[5]);

  /// see [RepositoryResponseEntityOb.description]
  static final description = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[6]);

  /// see [RepositoryResponseEntityOb.disabled]
  static final disabled = QueryBooleanProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[7]);

  /// see [RepositoryResponseEntityOb.forks]
  static final forks = QueryIntegerProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[8]);

  /// see [RepositoryResponseEntityOb.forksCount]
  static final forksCount = QueryIntegerProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[9]);

  /// see [RepositoryResponseEntityOb.fullName]
  static final fullName = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[10]);

  /// see [RepositoryResponseEntityOb.gitUrl]
  static final gitUrl = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[11]);

  /// see [RepositoryResponseEntityOb.hasDiscussions]
  static final hasDiscussions =
      QueryBooleanProperty<RepositoryResponseEntityOb>(
          _entities[0].properties[12]);

  /// see [RepositoryResponseEntityOb.homepage]
  static final homepage = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[13]);

  /// see [RepositoryResponseEntityOb.htmlUrl]
  static final htmlUrl = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[14]);

  /// see [RepositoryResponseEntityOb.id]
  static final id = QueryIntegerProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[15]);

  /// see [RepositoryResponseEntityOb.issuesUrl]
  static final issuesUrl = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[16]);

  /// see [RepositoryResponseEntityOb.labelsUrl]
  static final labelsUrl = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[17]);

  /// see [RepositoryResponseEntityOb.language]
  static final language = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[18]);

  /// see [RepositoryResponseEntityOb.languagesUrl]
  static final languagesUrl = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[19]);

  /// see [RepositoryResponseEntityOb.license]
  static final license = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[20]);

  /// see [RepositoryResponseEntityOb.name]
  static final name = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[21]);

  /// see [RepositoryResponseEntityOb.openIssues]
  static final openIssues = QueryIntegerProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[22]);

  /// see [RepositoryResponseEntityOb.openIssuesCount]
  static final openIssuesCount =
      QueryIntegerProperty<RepositoryResponseEntityOb>(
          _entities[0].properties[23]);

  /// see [RepositoryResponseEntityOb.owner]
  static final owner = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[24]);

  /// see [RepositoryResponseEntityOb.permissions]
  static final permissions = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[25]);

  /// see [RepositoryResponseEntityOb.private]
  static final private = QueryBooleanProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[26]);

  /// see [RepositoryResponseEntityOb.pullsUrl]
  static final pullsUrl = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[27]);

  /// see [RepositoryResponseEntityOb.pushedAt]
  static final pushedAt = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[28]);

  /// see [RepositoryResponseEntityOb.releasesUrl]
  static final releasesUrl = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[29]);

  /// see [RepositoryResponseEntityOb.size]
  static final size = QueryIntegerProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[30]);

  /// see [RepositoryResponseEntityOb.stargazersCount]
  static final stargazersCount =
      QueryIntegerProperty<RepositoryResponseEntityOb>(
          _entities[0].properties[31]);

  /// see [RepositoryResponseEntityOb.subscribersUrl]
  static final subscribersUrl = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[32]);

  /// see [RepositoryResponseEntityOb.subscriptionUrl]
  static final subscriptionUrl =
      QueryStringProperty<RepositoryResponseEntityOb>(
          _entities[0].properties[33]);

  /// see [RepositoryResponseEntityOb.teamsUrl]
  static final teamsUrl = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[34]);

  /// see [RepositoryResponseEntityOb.topics]
  static final topics = QueryStringVectorProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[35]);

  /// see [RepositoryResponseEntityOb.updatedAt]
  static final updatedAt = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[36]);

  /// see [RepositoryResponseEntityOb.url]
  static final url = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[37]);

  /// see [RepositoryResponseEntityOb.visibility]
  static final visibility = QueryStringProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[38]);

  /// see [RepositoryResponseEntityOb.watchers]
  static final watchers = QueryIntegerProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[39]);

  /// see [RepositoryResponseEntityOb.watchersCount]
  static final watchersCount = QueryIntegerProperty<RepositoryResponseEntityOb>(
      _entities[0].properties[40]);
}

/// [LastFetchTimeEntityOb] entity fields to define ObjectBox queries.
class LastFetchTimeEntityOb_ {
  /// see [LastFetchTimeEntityOb.id]
  static final id =
      QueryIntegerProperty<LastFetchTimeEntityOb>(_entities[1].properties[0]);

  /// see [LastFetchTimeEntityOb.lastFetchTime]
  static final lastFetchTime =
      QueryIntegerProperty<LastFetchTimeEntityOb>(_entities[1].properties[1]);
}
